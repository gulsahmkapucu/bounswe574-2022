version: 2.1

orbs:
  cloudrun: circleci/gcp-cloud-run@1.0.2
  gcr: circleci/gcp-gcr@0.15.0
  sonarcloud: sonarsource/sonarcloud@1.0.3

jobs:
  test-and-lint:
    docker:
      - image: cimg/python:3.8.10
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "colearnapp/requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r colearnapp/requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "colearnapp/requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: lint
          command: |
            . venv/bin/activate
            pylint colearnapp/colearnapp/ colearnapp/users/ colearnapp/spaces/
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest --junitxml=test-results/junit.xml colearnapp
      - store_test_results:
          path: test-results
      - sonarcloud/scan
      
  build-and-push:
    docker:
      - image: cimg/python:3.8.10
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - run: docker build -t gcr.io/${GOOGLE_PROJECT_ID}/colearnapp:${CIRCLE_SHA1} -t gcr.io/${GOOGLE_PROJECT_ID}/colearnapp:latest ./colearnapp
      - gcr/gcr-auth
      - run:
          name: Delete existing images on GCR
          command: gcloud container images delete gcr.io/${GOOGLE_PROJECT_ID}/colearnapp --force-delete-tags
      - run: docker push --all-tags gcr.io/${GOOGLE_PROJECT_ID}/colearnapp

  deploy:
    docker:
      - image: 'cimg/base:stable'
    resource_class: small
    steps:
      - cloudrun/init
      - run:
          name: Deploy to Cloud Run
          command: |
            gcloud run deploy colearnapp --image gcr.io/${GOOGLE_PROJECT_ID}/colearnapp:${CIRCLE_SHA1} --min-instances=0 --max-instances=4 --allow-unauthenticated --region=europe-west1 --cpu=1 --memory=128Mi --port 8000 --timeout=15 --update-env-vars SECRET_KEY=${SECRET_KEY},DB_HOST=${DB_HOST},DB_PASSWORD=${DB_PASSWORD},EMAIL_HOST=${EMAIL_HOST},EMAIL_HOST_USER=${EMAIL_HOST_USER},EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD},IS_HTTPS_ENABLED=True,SECURE_HSTS_SECONDS=31536000,AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID},AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

workflows:
  build-and-test-workflow:
    jobs:
      - test-and-lint
      - build-and-push:
          requires:
            - test-and-lint
      - deploy:
          requires:
            - build-and-push
